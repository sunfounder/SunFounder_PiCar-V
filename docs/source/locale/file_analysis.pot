# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SunFounder
# This file is distributed under the same license as the SunFounder PiCar-V package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder PiCar-V \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-02 18:07+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../file_analysis.rst:2
msgid "File Analysis"
msgstr ""

#: ../file_analysis.rst:4
msgid "There are two folders under /home/pi: **SunFounder_PiCar** for controlling motors and steering and **SunFounder_PiCar-V** for pan/tilt and wireless control. Here look into the code of PiCar-V."
msgstr ""

#: ../file_analysis.rst:8
msgid "Since too many contents and instructions are involved in the code, we will not cover every detail. For more knowledge about Python 2, Python 3, Django, HTML, and CSS in the programs, you can visit related websites or buy books to learn by yourself. In the following part, we will go through the overall structure and the process in brief."
msgstr ""

#: ../file_analysis.rst:14
msgid "First, let’s check the files in the code folder:"
msgstr ""

#: ../file_analysis.rst:21
msgid "``.git`` is a hidden directory to store all the information of a Git repository; it's generated automatically after you create the repository."
msgstr ""

#: ../file_analysis.rst:25
msgid "``Ball_track`` is used to let the car follow the red ball."
msgstr ""

#: ../file_analysis.rst:27
msgid "``datasheet`` stores the manual of some chips used in the hardware modules."
msgstr ""

#: ../file_analysis.rst:30
msgid "``mjpg-streamer`` is an open source streaming media library, through which the data of the camera is transferred."
msgstr ""

#: ../file_analysis.rst:33
msgid "``Remote_control`` is to store the code of the web server; it controls the motor and servo of the car based on the API request."
msgstr ""

#: ../file_analysis.rst:36
msgid "``.gitignore`` records the requests of file types to be ignored when the Github repository is synchronized."
msgstr ""

#: ../file_analysis.rst:39
msgid "``_init_.py`` is automatically generated when you create a project which is a standard necessary document of python package, just leave it there."
msgstr ""

#: ../file_analysis.rst:43
msgid "``i2cHelper.py`` is a Python script written by Python 2 to configure and detect the I2C connection."
msgstr ""

#: ../file_analysis.rst:46
msgid "``install_dependencies``, an executable bash script for simple installation and environment configuration."
msgstr ""

#: ../file_analysis.rst:49
msgid "``LICENSE``, as the name suggests, is a text file of GNU V2 license."
msgstr ""

#: ../file_analysis.rst:51
msgid "``README.md`` and ``show`` record some information normally for statement and prompts."
msgstr ""

#: ../file_analysis.rst:55
msgid "Server Code"
msgstr ""

#: ../file_analysis.rst:57
msgid "The server code is based on Django 1.10 (adapt to the latest release if needed). If you are interested in this, you can visit the Django website https://www.djangoproject.com/. Here we will just learn how the web server works."
msgstr ""

#: ../file_analysis.rst:64
msgid "The code may be updated irregularly on Github to fix bugs and release some functions update. So the code here is the initial version. You can view the updates in the Github repository at:"
msgstr ""

#: ../file_analysis.rst:68
msgid "https://github.com/sunfounder/SunFounder_PiCar-V/tree/V3.0"
msgstr ""

#: ../file_analysis.rst:70
msgid "Open the code directory and check the file by ``ls``:"
msgstr ""

#: ../file_analysis.rst:79
msgid "``remote_control`` is the main code directory of the web server. Open the code directory by cd ``remote_control``, and check the file by ls:"
msgstr ""

#: ../file_analysis.rst:88
msgid "``db.sqlite3`` is generated when you create a Django project."
msgstr ""

#: ../file_analysis.rst:90
msgid "``manage.py`` is the main program of the Django project and is generated when the project is created. It normally does not need to be modified."
msgstr ""

#: ../file_analysis.rst:94
msgid "``remote_control`` includes the main code files."
msgstr ""

#: ../file_analysis.rst:96
msgid "``start`` is a small script written to run ``sudo python manage.py runserver 0.0.0.0:8000``, and servo installation with attribute ``install`` just for convenience."
msgstr ""

#: ../file_analysis.rst:100
msgid "``static`` is to store some static pictures on the web."
msgstr ""

#: ../file_analysis.rst:102
msgid "The Django web server normally runs ``sudo python manage.py runserver`` to start. The address 0.0.0.0:8000 means the listening address covers all the addresses on the LAN, and the port number is 8000. Here we will just focus on the code in ``remote_control`` folder. Go to the directory via ``cd remote_control``:"
msgstr ""

#: ../file_analysis.rst:114
msgid "``driver`` stores the drivers of the car."
msgstr ""

#: ../file_analysis.rst:116
msgid "``__init__.py`` is automatically generated when you create a Django project which is a standard necessary document of python package, just leave it there."
msgstr ""

#: ../file_analysis.rst:120
msgid "``settings.py`` is automatically generated and stores the related settings."
msgstr ""

#: ../file_analysis.rst:123
msgid "``templates`` is a Django app for storing the webs in the html format."
msgstr ""

#: ../file_analysis.rst:125
msgid "``urls.py`` is generated automatically to configure the URL to associate with the code."
msgstr ""

#: ../file_analysis.rst:128
msgid "``views.py`` is the code for page control which is associated by the URL. It calls the templates to show the page and the driver to control the car."
msgstr ""

#: ../file_analysis.rst:132
msgid "``wsgi.py`` is generated automatically and does not need changes. For more, please visit the official website of Django."
msgstr ""

#: ../file_analysis.rst:135
msgid "So here is how the code works: Run the main program ``manage.py`` which will be associated with ``urls.py`` automatically, to respond to the URL. When you run the web browser like the Chrome to visit ``http://<rpi_ip_address>:<port>`` or visit the configured API via the client, the ``manage.py`` will turn to ``views.py`` due to the association of the ``urls.py.`` Then the ``views.py`` processes this and returns the templates to the browser. In addition, it will call the ``driver`` package on the basis of the parameters set in the browser to control the car."
msgstr ""

#: ../file_analysis.rst:144
msgid "Now open the folder ``driver`` and check:"
msgstr ""

#: ../file_analysis.rst:152
msgid "The ``driver`` folder mainly includes the driver modules for controlling the pan and tilt and camera streamer."
msgstr ""

#: ../file_analysis.rst:155
msgid "``camera.py`` for controlling the pan-and-tilt."
msgstr ""

#: ../file_analysis.rst:157
msgid "``config`` stores the calibration data."
msgstr ""

#: ../file_analysis.rst:159
msgid "``__init__.py`` is the essential file of the package and you can just leave it alone."
msgstr ""

#: ../file_analysis.rst:161
msgid "``stream.py`` is a video streaming service based on the MJPG-streamer."
msgstr ""

#: ../file_analysis.rst:163
msgid "Exit and open the folder ``templates`` to view:"
msgstr ""

#: ../file_analysis.rst:172
msgid "This folder is created by the ``manage.py startapp`` just for calling the templates conveniently. Therefore, the files have not been changed except for the ``templates``. Open the ``templates`` again:"
msgstr ""

#: ../file_analysis.rst:182
msgid "There are three HTML files that also consist of layers. The low level ``base.html`` stores contents contained on each page such as the ``<head>`` of HTML, the overall layout, and contents of the home page by default. The surface layer: ``cali.html`` for calibration and ``run.html`` to control the car."
msgstr ""
